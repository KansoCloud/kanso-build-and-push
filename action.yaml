name: setup aws
description: "Config AWS"
inputs:
  Cloud:
    description: Name of the cloud AWS or Duplo
    required: true
  tenant:
    description: name of the duplo tenant
    required: false
  duplo_token:
    required: false
  role_arn:
    description: role arn og oidc role
    required: false
  aws-region:
    required: false
  repo_type:
    description: type of ECR repo "public" or "private"
    required: true
  image_tag:
    description: "AWS ECR image tag 'ECR repo name':'Image tag name' example = 'reancare-service-dev-uat:develop_798hdfm9' "
    required: true
  task_def:
    required: true
  service_name:
    required: true
    
runs:
  using: "composite"
  steps:
    - name: aws-jit
      if : ${{ inputs.Cloud == 'Duplo' }}
      uses: duplocloud/ghactions-aws-jit@master
      with:
        duplo_host: https://reanfoundation.duplocloud.net/
        duplo_token: ${{ inputs.duplo_token }}
        tenant: ${{ inputs.tenant }}
        
    - name: Configure AWS credentials
      id: config-aws-creds
      uses: aws-actions/configure-aws-credentials@v2
      with:
         role-to-assume: ${{ inputs.role_arn }}
         aws-region: ${{ inputs.aws-region }}
         role-session-name: CICDSession
         mask-aws-account-id: 'no'
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Login to Amazon ECR
      if: ${{ inputs.repo_type == 'private' }}
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Login to Amazon ECR
      if: ${{ inputs.repo_type == 'public' }}
      shell: bash
      run: |
        aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws
      
    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
            ${{ runner.os }}-buildx-
            
    - name: Build and push (NON PROD)
      if: ${{ inputs.repo_type == 'private' }}
      id: docker_build
      uses: docker/build-push-action@v3
      with:
          context: ./
          file: ./Dockerfile
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ inputs.image_tag }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

    - name: Build and push (PROD)
      if: ${{ inputs.repo_type == 'public' }}
      # id: docker_build
      uses: docker/build-push-action@v3
      with:
          context: ./
          file: ./Dockerfile
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: public.ecr.aws/i9y2d4u3/${{ inputs.image_tag }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          
    - name: Scan image
      if: ${{ inputs.repo_type == 'private' }}
      uses: anchore/scan-action@v3
      with:
       image: "${{ steps.login-ecr.outputs.registry }}/${{ inputs.image_tag }}"
       fail-build: true
       severity-cutoff: critical

    - name: Scan image
      if: ${{ inputs.repo_type == 'public' }}
      uses: anchore/scan-action@v3
      with:
       image: "public.ecr.aws/i9y2d4u3/${{ inputs.image_tag }}"
       fail-build: true
       severity-cutoff: critical

    - name: Download task definition
      shell: bash
      run: |
        aws ecs describe-task-definition --task-definition ${{ inputs.task_def }} \
        --query taskDefinition > task-definition.json
        
    - name: New image ID in the Amazon ECS task definition
      if: ${{ inputs.repo_type == 'private' }}
      id: task-def-private
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: default
        image: ${{ steps.login-ecr.outputs.registry }}/${{ inputs.image_tag }}
        
    - name: New image ID in the Amazon ECS task definition
      if: ${{ inputs.repo_type == 'public' }}
      id: task-def-public
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: default
        image: public.ecr.aws/i9y2d4u3/${{ inputs.image_tag }}
        
    - name: Deploy Amazon ECS task definition
      if: ${{ inputs.repo_type == 'private' }}
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def-private.outputs.task-definition }}
        wait-for-service-stability: true
    
    - name: Deploy Amazon ECS task definition
      if: ${{ inputs.repo_type == 'public' }}
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def-public.outputs.task-definition }}
        wait-for-service-stability: true
        
    - name: Task Definition Variable
      id: taskdefintionvar
      shell: bash
      run: |
        echo "task_definition_arn=$(aws ecs describe-task-definition --task-definition ${{ inputs.task_def }} | jq '.[] | .taskDefinitionArn')" >> $GITHUB_OUTPUT
        
    - name: Task Defintion ARN
      shell: bash
      run: |
        echo "Task Defintion: ${{ steps.taskdefintionvar.outputs.task_definition_arn }}"
        
    # - name: Deploy Amazon ECS task definition using Duplo API
    #   uses: fjogeleit/http-request-action@master
    #   with:
    #     url: 'https://reanfoundation.duplocloud.net/subscriptions/${{ inputs.duplo_id }}/UpdateEcsService'
    #     method: 'POST'
    #     data: '{"TaskDefinition":${{ steps.taskdefintionvar.outputs.task_definition_arn }},"Name": "${{ inputs.service_name }}","Replicas":1, "HealthCheckGracePeriodSeconds": 1200}'
    #     bearerToken: ${{ inputs.duplocloud_token }}
